# Dependencies:
# name - defined in vars
# vpc_id, public_subnets - from role get_facts

- name: Creating Security Group for ELB
  ec2_group:
    name: "{{ name }}elb"
    description: "{{ name }}elb"
    vpc_id: "{{ vpc_id }}"
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: ec2_sg_elb

- name: Create ELB
  ec2_elb_lb:
    name: "{{ elb.name }}"
    state: "{{ elb.state }}"
    scheme: "{{ elb.scheme }}"
    subnets: "{{ public_subnets }}"
     cross_az_load_balancing: "{{ elb.cross_az_load_balancing }}"
    listeners:
      - protocol: http
        load_balancer_port: 80
        instance_port: 80
    health_check:
      ping_protocol: http
      ping_port: 80
      ping_path: "/"
      response_timeout: 5
      interval: 30
      unhealthy_threshold: 2
      healthy_threshold: 10
    idle_timeout: 60
    security_group_ids: "{{ ec2_sg_elb.group_id }}"
  register: ec2_elb

- name: Debug ec2elb
  debug:
    var: ec2_elb

#- name: Create security group
#  ec2_group:
#    name: "{{ env.name }}{{ cluster.name }}elb"
#    description: "Allow access to 80 port on web nodes from ELB"
#    vpc_id: "{{ ec2_vpc.vpc_id }}"
#    rules:
#      - proto: tcp
#        from_port: 80
#        to_port: 80
#        group_id: "{{ ec2_elb.elb.security_group_ids[0] }}"
#    rules_egress:
#      - proto: all
#        cidr_ip: 0.0.0.0/0
#  register: ec2_elb_sg

# then use ec2_elb_sg for sg on web nodes
