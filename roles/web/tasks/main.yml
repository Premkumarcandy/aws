# Dependencies:
# name - defined in vars
# vpc_id, vpc_cidr_block, public_subnets, private_subnets - from role get_facts
# key_name depends on role ec2_keys

- name: Creating Security Group for Web Nodes
  ec2_group:
    name: "{{ name }}web"
    description: "{{ name }}web"
    vpc_id: "{{ vpc_id }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: "{{ vpc_cidr_block }}"
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: ec2_sg_web

- name: Debug Security Group for Web Nodes
  debug:
    var: ec2_sg_web

- name: Provision ec2 instances for Web nodes
  ec2:
    # FIX: create instances in differrent subnets
    vpc_subnet_id: "{{ private_subnets[0] }}"
    group_id: "{{ ec2_sg_web.group_id }}"
    image: "{{ web.image }}"
    instance_type: "{{ web.instance_type }}"
    key_name: "{{ web.key_name }}"
    instance_profile_name: "{{ web.instance_profile_name }}"
    instance_tags:
      Name: "{{ name }}web"
      Env: "{{ env.name }}"
    count_tag:
      Name: "{{ name }}web"
    exact_count: "{{ web.exact_count }}"
    wait: true
#  with_items: "{{ private_vpc_subnets }}"
  register: ec2_web

- name: Debug ec2_web
  debug:
    var: ec2_web
  
- name: Wait for SSH to come up
  wait_for: 
    host: "{{ item.private_ip }}" 
    port: 22 
    delay: 60 
    state: started
  with_items: "{{ ec2_web.tagged_instances }}"
